@page "/chatbot"
@inject IJSRuntime JsRuntime
@using SerbleAi.Data
@using SerbleAi.Data.Schemas
@using GeneralPurposeLib

<PageTitle>Serble AI - Chat Bot</PageTitle>
<RequireLogin Callback="LoginCallback" RedirectToLogin="false"></RequireLogin>
<link href="css/chat.css" rel="stylesheet"/>

<br/>
<div class="row d-flex justify-content-center" style="padding-top: 20px">

    <div class="col-3" style="padding-left: 20px">
        <div class="">
            <h1>Chat Bot</h1>
            <p>
                This bot was created before ChatGPT was released. It may not be as good as ChatGPT, but it allows you to change the personality of the bot.
                Not everything the bot says will be accurate, and it has very limited knowledge of current events however it does know
                your username, your timezone, and your browser's reported time.
            </p>
        </div>
    </div>

    <div class="col-4">
        <section style="">
            <div class="container py-5">

                <div class="card" id="chat2">
                    <div class="card-header d-flex justify-content-between align-items-center p-3" style="background-color: #222426">
                        <h5 class="mb-0">Chatbot</h5>
                        <a href="/settings" type="button" class="btn btn-secondary btn-sm" role="button" data-mdb-ripple-color="dark">Settings</a>
                    </div>
                    <div class="card-body overflow-auto" id="msgScroll" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px; background-color: #222426">

                        @foreach (string msg in _messages) {
                            @if (msg.StartsWith("User:")) {
                                <div class="d-flex flex-row justify-content-end">
                                    <div>
                                        <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">@msg</p>
                                    </div>
                                </div>
                                <div class="p-1"></div>
                            }
                            else {
                                <div class="d-flex flex-row justify-content-start mb-4">
                                    <div>
                                        <p class="small p-2 ms-3 mb-1 rounded-3 bg-secondary" style="background-color: #f5f6f7;">@msg</p>
                                    </div>
                                </div>
                                <div class="p-1"></div>
                            }

                        }

                    </div>
                    <div style="background-color: #222426;">
                        <p class="text-danger text-center" id="error"></p>
                    </div>
                    <form onsubmit="return false" class="card-footer text-muted d-flex justify-content-start align-items-center p-3" style="background-color: #222426">
                        <input type="text" class="form-control form-control-lg" id="msg"
                               placeholder="Enter message" style="background-color: #222426; color: white">
                        <button class="btn btn-lg btn-outline-light" @onclick="Send">Send</button>
                    </form>
                </div>

            </div>
        </section>
    </div>

    <div class="col-3" style="padding-right: 20px">
        <h1>Options</h1>
        <label for="personality">Personality</label>
        <textarea id="personality" class="form-control text-white" aria-label="Personality" rows="3" style="background-color: #222426">@_personality</textarea>
    </div>

</div>



@code {
    private string[] _messages = { "User: Hello", "Bot: Hey there friend!", "User: How are you?", "Bot: I'm good, it's nice to see you" };
    private string _openAiToken = "";
    private string _tokenType = "serble";
    private User? _user;
    private StoredUser? _storedUser;
    private const int MaxCharacters = 256;
    private const int UsedMessages = 5;
    private const string DefaultPersonality = "A chatbot that is friendly";
    private string _personality = DefaultPersonality;

    private Task LoginCallback((User?, string) data) {
        _user = data.Item1;
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) {
            return;
        }
        // Get openai token from local storage
        HtmlInteractor htmlInteractor = new(JsRuntime);
        _openAiToken = await htmlInteractor.GetFromLocalStorage("token");
        _tokenType = await htmlInteractor.GetFromLocalStorage("tokenType");
        string savedPersonality = await htmlInteractor.GetFromLocalStorage("chatbot-personality");
        await htmlInteractor.Log("Personality loaded from local storage: " + savedPersonality);
        if (string.IsNullOrWhiteSpace(savedPersonality)) {
            StateHasChanged();
            return;
        }
        _personality = savedPersonality;
        StateHasChanged();
    }

    private async void Send() {
        HtmlInteractor interactor = new(JsRuntime);
        string message = await interactor.GetValue("msg");
        string personality = await interactor.GetValue("personality");
        if (personality != DefaultPersonality) {
            await interactor.SaveToLocalStorage("chatbot-personality", personality);
        }

        // Validate
        if (string.IsNullOrWhiteSpace(message)) {
            await interactor.SetHtml("error", "Message cannot be empty");
            return;
        }
        if (message.Length > MaxCharacters) {
            await interactor.SetHtml("error", $"Message cannot be longer than {MaxCharacters} characters");
            return;
        }
        await interactor.SetHtml("error", "");
        
        await interactor.SetValue("msg", "");
        _messages = _messages.Append($"User: {message}").ToArray();
        StateHasChanged();
        await interactor.InvokeCode("var objDiv = document.getElementById('msgScroll');objDiv.scrollTop = objDiv.scrollHeight; console.log('scrolled to bottom');");
        
        string conversation = string.Join("\n", _messages.TakeLast(UsedMessages));  // Only take the last X messages to stop overspending
        string timezone = await interactor.GetTimeZone();
        string timeIso = await interactor.GetDateTime();
        bool daylightSavings = await interactor.GetDaylightSavings();
        string context = $"\n" +
                         $"DateTime ISO: {timeIso}\n" +
                         $"Timezone: {timezone}\n" +
                         $"Is Daylight Savings: {daylightSavings}\n" +
                         $"User's Name: {_user!.Username}";
        string prompt = personality + context + "\n\n" + conversation;

        string token;
        bool isSerbleToken;
        if (_tokenType == "token") {
            isSerbleToken = false;
            token = _openAiToken;
        }
        else {  // Serble
            isSerbleToken = true;
            if (!await UserAiLimitManager.CanUseAi(_user, prompt)) {
                await interactor.Log("User has reached their AI limit");
                await interactor.SetHtml("error", "You have reached your token limit, check when they renew <a href=\"/settings\">here</a>");
                return;
            }
            token = GlobalConfig.Config["OpenAIToken"];
        }
        
        if (await AiManager.ModerationCheck(token, personality)) {
            // Prompt is not allowed
            await interactor.SetHtml("error", "Personality was flagged by the OpenAI moderation engine");
            StateHasChanged();
            return;
        }
        
        await interactor.InvokeCode(@"
var objDiv = document.getElementById('msgScroll');
window.isMsgScrolledToTop = objDiv.scrollHeight - objDiv.scrollTop === objDiv.clientHeight;
console.log('Is max scrolled: ' + window.isMsgScrolledToTop);
");
        
        _messages = _messages.Append("Bot is typing...").ToArray();
        StateHasChanged();
        
        await interactor.InvokeCode(@"
if (window.isMsgScrolledToTop) {
var objDiv = document.getElementById('msgScroll');
objDiv.scrollTop = objDiv.scrollHeight;
console.log('scrolled to bottom');
} else {
console.log('not scrolled to bottom');
}");

        // Get a response from the bot
        // Put messages in this format: "User: Hello\nBot: Hi there!"
        AiResponse resp;
        try {
            resp = await AiManager.GetResponse(token, prompt, AiModel.TextDavinci, isSerbleToken ? _user!.Id! : null);
        }
        catch (Exception e) {
            await interactor.Log(e.Message);
            Logger.Debug(e);
            resp = new AiResponse(0, "Error: " + e.Message);
        }

        if (resp.Flagged) {
            await interactor.SetHtml("error", $"Message content was flagged by the OpenAI moderation engine");
            _messages = _messages.Take(_messages.Length - 1).ToArray();
            StateHasChanged();
            return;
        }
        
        if (isSerbleToken) {
            // Get stored user
            if (_storedUser == null) {
                _storedUser = await Program.StorageManager.GetUser(_user!.Id!);
                if (_storedUser == null) {
                    // Not on record
                    await interactor.Log($"User {_user.Username!} not on record");
                    Logger.Warn($"User {_user.Username!} not on record");
                    await interactor.SetHtml("error", "Oh No, something went wrong. Please clear your cookies and try again");
                    return;
                }
            }
        
            await UserAiLimitManager.AddTokens(_storedUser.Value, resp.UsedTokens);
            await interactor.Log("Used " + resp.UsedTokens + " tokens");
        }
        
        _messages = _messages.Take(_messages.Length-1).Append($"Bot: {resp}").ToArray();
        StateHasChanged();
    }
}
