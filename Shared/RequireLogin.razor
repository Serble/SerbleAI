@using GeneralPurposeLib
@using SerbleAi.Data
@using SerbleAi.Data.Schemas
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public Func<(User?, string), Task>? Callback { get; set; } = _ => Task.CompletedTask; 

    [Parameter]
    public bool RedirectToLogin { get; set; } = true;
    
    [Parameter]
    public bool RedirectToAccessDenied { get; set; }
    
    [Parameter]
    public bool NoLockdownCheck { get; set; }
    
    [Parameter]
    public bool TryLoginEvenIfWhitelist { get; set; }

    [Parameter]
    public AccountAccessLevel RequiredAccessLevel { get; set; } = AccountAccessLevel.Normal;

    private PageType PageType => RequiredAccessLevel switch {
        AccountAccessLevel.Normal => PageType.Account,
        AccountAccessLevel.Admin => PageType.Admin,
        _ => PageType.NonAccount
    };

    public void RunCheck(Func<(User?, string), Task> callback) {
        Callback = callback;
        RedirectToLogin = false;
        OnAfterRender(true);
    }

    protected override async void OnAfterRender(bool firstRender) {
        if (!firstRender) return;
        Cookie cookieHandler = new (JsRuntime);
        HtmlInteractor htmlInteractor = new(JsRuntime);
        await htmlInteractor.Log("Checking if user is logged in...");
        
        // Check for oauth token
        string token = await cookieHandler.GetValue("refresh_token");
        if (token == "") {
            token = "urmum";  // If no token, set to random string so it fails because invalid token
        }
        
        // Get access token
        SerbleApiResponse<string> tokenResponse = await SerbleApiHandler.GetAccessToken(token);
        if (!tokenResponse.Success) {
            await htmlInteractor.Log(tokenResponse.ErrorMessage);
            await NotLoggedIn();
            return;
        }
        string accessToken = tokenResponse;

        SerbleApiResponse<User> response = await SerbleApiHandler.GetUser(accessToken);
        if (!response.Success) {
            await htmlInteractor.Log(response.ErrorMessage);
            await NotLoggedIn();
            return;
        }

        if ((int)RequiredAccessLevel > response.ResponseObject!.PermLevel!.Value) {
            // User does not have required access level
            await htmlInteractor.Log("User does not have required access level");
            await NotLoggedIn();
            return;
        }

        StoredUser? storedUser = await Program.StorageManager.GetUser(response.ResponseObject!.Id!);
        if (storedUser == null) {
            // User is not in database, this shouldn't happen
            await htmlInteractor.Log("User is not in database");
            Logger.Warn($"User {response.ResponseObject.Username} is not in database");
            await NotLoggedIn();
            return;
        }

        if (GlobalConfig.Config["EnableWhitelist"] && 
            response.ResponseObject.PermLevel != (int)AccountAccessLevel.Admin && 
            !Program.Whitelist.Contains(storedUser.Value.Id)) {
            // User is not whitelisted
            await htmlInteractor.Log("User is not whitelisted");
            if (!TryLoginEvenIfWhitelist) {
                NavigationManager.NavigateTo("/whitelisted");
                return;
            }
            await NotLoggedIn();
            return;
        }
        
        if (storedUser.Value.IsBanned) {
            NavigationManager.NavigateTo("/banned");
            return;
        }

        try {
            await htmlInteractor.Log("User is logged in as " + response.ResponseObject!.Username);
        }
        catch (Exception) {
            // Ignore because it doesn't matter
        }

        // Callback
        await Callback!.Invoke((response.ResponseObject, accessToken));
    }
    
    private async Task NotLoggedIn(bool disabledAccount = false) {
        // Redirect if redirect is enabled
        HtmlInteractor htmlInteractor = new(JsRuntime);
        await htmlInteractor.Log("User is not logged in");
        if (RedirectToAccessDenied) {
            NavigationManager.NavigateTo("/accessdenied?page=" + Uri.EscapeDataString(NavigationManager.Uri));
            return;
        }
        if (disabledAccount) {
            NavigationManager.NavigateTo("/accountdisabled");
            return;
        }
        if (RedirectToLogin) {
            await htmlInteractor.Log("Invoking login");
            await AttemptOAuth();
            return;
        }
        
        // Otherwise run callback with null user
        await Callback!.Invoke((null, ""));
    }

    private void LockedDown() {
        NavigationManager.NavigateTo("/lockdown");
    }
    
    private async Task AttemptOAuth() {
        HtmlInteractor htmlInteractor = new(JsRuntime);
        await htmlInteractor.Log("Attempting OAuth...");
        
        string state = Guid.NewGuid().ToString().Replace("-", "");
        // Save state to local storage
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "oauth_state", state);
        NavigationManager.NavigateTo(
            $"{GlobalConfig.Config["OAuthUrl"].Text}?redirect_uri=" + Uri.EscapeDataString(NavigationManager.BaseUri + "oauthcallback") +
            $"&client_id={GlobalConfig.Config["ClientID"].Text}&response_type=token&scope={GlobalConfig.Config["Scope"].Text}&state={state}");
    }

}